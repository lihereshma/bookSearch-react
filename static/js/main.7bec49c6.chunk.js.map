{"version":3,"sources":["Components/Title.js","Components/SearchBox.js","Components/Book.js","Components/BookList.js","Components/Preloader.js","Components/BookSearch.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","SearchBox","handleChange","handleSubmit","onSubmit","onChange","placeholder","type","Book","bookImage","bookTitle","bookAuthor","publishedDate","bookRating","moreLink","authorsNames","forEach","auth","push","authors","join","src","undefined","thumbnail","alt","rel","target","href","title","BookList","result","map","book","i","key","volumeInfo","imageLinks","infoLink","averageRating","Preloader","BookSearch","useState","setBook","setResult","apiKey","process","loading","setLoading","event","value","preventDefault","console","log","axios","get","then","response","data","totalItems","alert","items","catch","error","request","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7bec49c6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Title() {\r\n  return (\r\n    <div className=\"row\">\r\n      <h1>book finder</h1> \r\n    </div> \r\n  )\r\n}\r\n\r\nexport default Title\r\n","import React from 'react'\r\n\r\nfunction SearchBox({ handleChange, handleSubmit }) {\r\n  return (\r\n    <div className=\"row\">\r\n      <form className=\"col-11 col-lg-6\" onSubmit={ handleSubmit }>  \r\n        <div className=\"form-group\">  \r\n          <input onChange={ handleChange } className=\"form-control\" placeholder=\"Search...\" type=\"text\" />  \r\n        </div> \r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\n\r\nfunction Book({ bookImage, bookTitle, bookAuthor, publishedDate, bookRating, moreLink }) {\r\n\r\n  const authorsNames = [];\r\n  if (bookAuthor) {\r\n    bookAuthor.forEach(function(auth) {\r\n      authorsNames.push(auth);\r\n    });\r\n  }\r\n  let authors = authorsNames.join(\", \");\r\n  \r\n  return ( \r\n    <div className=\"col-lg-3 col-md-6 col-sm-12 col-12 mb-4\">\r\n      <div className=\"card\">\r\n        <div className=\"card-image\">\r\n          <img src={ bookImage !== undefined ? bookImage.thumbnail : 'https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg' } alt={ bookTitle } />  \r\n        </div>  \r\n        <div className=\"card-content\">  \r\n          <p className=\"card-title\">{ bookTitle }</p> \r\n          <p className=\"card-author\"><span className=\"title\">Authors: </span>{ authors }</p> \r\n          <p className=\"card-date\"><span className=\"title\">Published Date: </span>{ publishedDate !== undefined ? publishedDate : 'Unknown' }</p>  \r\n          <p><span className=\"title\">Average Rating: </span>{ bookRating !== undefined ? bookRating : 'Not yet rated' }</p>\r\n          <div>\r\n            <a rel=\"noopener noreferrer\" target='_blank' href={ moreLink } className=\"btn btn-primary\" title=\"Know More\">Know more</a>  \r\n          </div>           \r\n        </div>  \r\n      </div>  \r\n    </div> \r\n  )\r\n}\r\n\r\nexport default Book\r\n","import React from 'react'\r\nimport Book from './Book'\r\n\r\nfunction BookList({ result }) {\r\n  return (\r\n    <div className=\"container-fluid\">    \r\n      <div className=\"row\">\r\n      { result.map((book, i) => {\r\n        return (\r\n          <Book key={ i } bookImage={ book.volumeInfo.imageLinks } bookTitle={ book.volumeInfo.title } moreLink={ book.volumeInfo.infoLink }\r\n                publishedDate={ book.volumeInfo.publishedDate } bookRating={ book.volumeInfo.averageRating } \r\n                bookAuthor={ book.volumeInfo.authors } />\r\n        )\r\n      })} \r\n      </div>\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default BookList\r\n","import React from 'react'\r\n\r\nfunction Preloader() {\r\n  return (\r\n    <div className=\"loader\" />\r\n  )\r\n}\r\n\r\nexport default Preloader\r\n","import React, { useState } from \"react\";  \r\nimport axios from 'axios';    \r\nimport Title from './Title';\r\nimport SearchBox from \"./SearchBox\";\r\nimport BookList from \"./BookList\";\r\nimport Preloader from \"./Preloader\";\r\n\r\nfunction BookSearch() {\r\n  const [book, setBook] = useState(\"\")\r\n  const [result, setResult] = useState([])\r\n  const apiKey = process.env.REACT_APP_KEY\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  function handleChange(event) {  \r\n    const book = event.target.value;  \r\n    setBook(book);  \r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    setLoading(true) \r\n    event.preventDefault(); \r\n    console.log(`https://www.googleapis.com/books/v1/volumes?q=${ book }&key=${ apiKey }&maxResults=40`)   \r\n    axios.get(`https://www.googleapis.com/books/v1/volumes?q=${ book }&key=${ apiKey }&maxResults=40`)    \r\n    .then(response => { \r\n      if(response.data.totalItems === 0) {\r\n        alert(\"Result Not found...\")\r\n      } else {\r\n        setLoading(false)\r\n        setResult(response.data.items);  \r\n      }\r\n    }) \r\n    .catch(error => {\r\n      if (error.response) {\r\n        alert(\"Field is required...\")\r\n      } else if (error.request) {\r\n        alert(\"No Internet Connection...\")\r\n      }\r\n    }) \r\n  } \r\n\r\n  return (     \r\n    <div className=\"main\"> \r\n      <section className=\"home\">\r\n        <div className=\"container\"> \r\n          <Title /> \r\n          <SearchBox handleChange={ handleChange } handleSubmit={ handleSubmit } />\r\n        </div>   \r\n      </section>\r\n      { loading ? \r\n        <Preloader /> \r\n        :\r\n        <section className=\"output\">\r\n          <BookList result={ result } /> \r\n        </section>\r\n      }\r\n    </div>    \r\n  )\r\n}\r\n\r\nexport default BookSearch\r\n","import React from 'react';\nimport './App.css';\nimport BookSearch from './Components/BookSearch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookSearch />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}